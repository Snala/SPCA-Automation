import json
import requests
import os
import re
import base64
import tempfile
import re
import datetime
import fitz
import glob
import time
import getpass
import sys
import platform
from pathlib import Path
from dateutil.relativedelta import relativedelta

# Detect if we are running on Windows or MacOS to determine how we format time.
if platform.system() == 'Windows':
	string_time_format = "%#I:%M %p"
elif platform.system() == 'Darwin':
	string_time_format = "%-I:%M %p"


class ClinicHQ:
	def __init__(self, user_name, password):
		self.hostname = 'https://clinichq.com'
		self.headers = {'User-Agent': 'Mozilla/5.0'}
		payload = {'UserName': user_name, 'Password': password}
		self.session = requests.Session()
		first_pass = r'<input name="__RequestVerificationToken" type="hidden" value="[^"]*" />'
		second_pass = r'value="[^"]*'
		token = re.findall(second_pass, re.findall(first_pass, self.session.get(self.hostname + '/account/login', headers=self.headers).text)[0])[
			0].replace('value="', '')
		payload['__RequestVerificationToken'] = token
		self.session.post(self.hostname + '/account/login', headers=self.headers, data=payload)
		check_login = self.session.get(self.hostname + '/api/lookup/me')
		try:
			check_login.json()
		except json.JSONDecodeError:
			print('Invalid username/password, exiting!')
			time.sleep(10)
			exit(1)

	def request(self, url: str, payload=None, request_type='get'):
		if not payload:
			payload = {}
		if request_type == 'get':
			result = self.session.get(self.hostname + url, headers=self.headers, data=payload)
			if result.status_code != 200:
				raise Exception('Bad request, status code: {}'.format(result.status_code))
			return result
		elif request_type == 'post':
			result = self.session.post(self.hostname + url, headers=self.headers, json=payload)
			if result.status_code != 200:
				raise Exception('Bad request, status code: {}'.format(result.status_code))
			return result

	def get_appointments(self, date: str, sort_order=5):
		datetime.datetime.strptime(date, "%Y-%m-%d")  # Verify the time string is valid.
		return self.request('/api/paperwork/appointments/{}?sortOrder={}'.format(date, sort_order)).json()

	def get_animal_summary(self, animal: int):
		return self.request('/api/animals/summary/{}'.format(animal)).json()

	def get_chosen_services(self, appointment_id: int):
		selected_services = self.request('/spa/checkout/loadfinancial/{}'.format(appointment_id)).json()
		result = []
		for service in selected_services:
			result.append(service['name'])
		return result

	def download_pdf(self, appointment_id: int):
		payload = {'ids': [appointment_id], 'consentType': 2, 'templates': [], 'paperwork': []}
		response = self.request('/paperwork/printAll/', payload, 'post')
		missing_signature = []
		if len(response.content) == 0:
			payload['consentType'] = 3
			missing_signature.append(appointment_id)
		response = self.request('/paperwork/printAll/', payload, 'post')
		with open(os.path.join(tempfile.gettempdir(), 'pdfs/' + str(appointment_id) + '.pdf'), 'wb') as file:
			file.write(response.content)
			file.close()
		return missing_signature

	def get_animal_cautions(self, date: str):
		checkout_queue = self.request('/api/checkout/queue/?date={}'.format(date)).json()['items']
		animal_cautions = []
		for animal in checkout_queue:
			if animal['animalCaution']:
				animal_cautions.append(animal['id'])
		return animal_cautions

	def get_animal_medical(self, appointment_id: int):
		custom_fields = self.request('/api/common/custom-fields/{}'.format(appointment_id)).json()
		medical_attributes = {
			'spayed_neutered': True,
			'health_issues': True,
			'meds_pregnant': True,
			'vaccine_reactions': True
		}
		for field in custom_fields:
			if field['id'] == 9173:
				if str(field['value']) == str(8685):  # If not pregnant/meds
					medical_attributes['meds_pregnant'] = False
			if field['id'] == 9174:
				if str(field['value']) == str(8687):  # If no health issues
					medical_attributes['health_issues'] = False
			if field['id'] == 9175:
				if str(field['value']) == str(8689):  # If no vaccine reactions
					medical_attributes['vaccine_reactions'] = False
			if field['id'] == 8977:  # If it exists, do not highlight
				medical_attributes['spayed_neutered'] = False
		return medical_attributes


class Details:
	def __init__(self, user: str, password: str):
		self.clinic_connection = ClinicHQ(user.strip(), password.strip())
		self.appointment_list = []
		self.date = ""
		self.missing_signatures = []
		self.animal_summaries = {}

	def get_appointment_list(self, date: str):
		datetime.datetime.strptime(date, "%Y-%m-%d")  # Verify the time string is valid.
		self.date = date
		appointments = self.clinic_connection.get_appointments(self.date)
		animal_cautions = self.clinic_connection.get_animal_cautions(self.date)
		for appointment in appointments:
			# print(self.clinic_connection.get_animal_summary(int(appointment['animalId'])))
			self.animal_summaries[int(appointment['animalId'])] = self.clinic_connection.get_animal_summary(int(appointment['animalId']))
			if int(appointment['id']) in animal_cautions:
				set_caution = True
			else:
				set_caution = False
			self.appointment_list.append({
				'id': int(appointment['id']),
				'animalCaution': set_caution,
				'clientName': appointment['clientName'],
				'clientEmail': self.animal_summaries[int(appointment['animalId'])]['client']['email'],
				'clientCell': self.animal_summaries[int(appointment['animalId'])]['client']['cellPhone'],
				'clientHome': self.animal_summaries[int(appointment['animalId'])]['client']['homePhone'],
				'animalName': appointment['animalName'],
				'animalNumber': appointment['animalNumber'],
				'species': appointment['species'],
				'animalId': int(appointment['animalId']),
				'startTime': appointment['startTime'],
				'medical_attributes': self.clinic_connection.get_animal_medical(int(appointment['id'])),
				'services': self.clinic_connection.get_chosen_services(appointment['id'])
			})
		return self.appointment_list

	def vaccine_reminders(self, animal_id: int):
		vaccine_list = ['Rabies', 'DHPP', 'Bordetella', 'Influenza', 'FVRCP', 'FelineLeukemia']
		reminders = {}
		animal_summary = self.animal_summaries[animal_id]
		for appointment in animal_summary['appointments']:
			for custom_field in appointment['customValues']:
				for vaccine in vaccine_list:
					if vaccine in str(custom_field['customFieldName']):
						try:
							date = str(custom_field['value']).replace('.', '/').replace('-', '/')
							date = date.split('/')
							if len(date[0]) < 2:
								date[0] = '0' + str(date[0])
							if len(date[1]) < 2:
								date[1] = '0' + str(date[1])
							if len(date[2]) < 4:
								date[2] = '20' + str(date[2])
							date = str("{}/{}/{}").format(date[0], date[1], date[2])
						except(ValueError, IndexError, IndentationError):
							date = str(custom_field['value'])
						if vaccine in reminders:
							try:
								if datetime.datetime.strptime(date, "%m/%d/%Y") > datetime.datetime.strptime(reminders[vaccine], "%m/%d/%Y"):
									reminders[vaccine] = date
							except ValueError:
								# If we cannot determine the date, because of bad data, return the bad data and let it be printed out.
								reminders[vaccine] = date
						else:
							reminders[vaccine] = date
		return reminders

	def generate_reminder_summary(self):
		with open(os.path.join(Path.home(), "Downloads", "Reminder List " + self.date + ".txt"), 'w') as vaccine_reminder_document:
			vaccine_reminder_document.write("! = Expired Vaccine\n+ = Expires within 6 mo\n? = Bad data for this reminder\n\n\n")
			for appointment in self.appointment_list:
				if appointment['animalId'] > 0:
					vaccine_reminders_list = test.vaccine_reminders(appointment['animalId'])
					if vaccine_reminders_list:
						start_time = datetime.datetime.strptime(appointment['startTime'], "%H:%M:%S")
						start_time = start_time.strftime(string_time_format)
						vaccine_reminder_document.write(
							"{},{},{},({}),{}\n".format(start_time, appointment['animalName'], appointment['animalNumber'], appointment['clientName'], appointment['species']))
						for vaccine in vaccine_reminders_list:
							try:
								if datetime.datetime.strptime(vaccine_reminders_list[vaccine], "%m/%d/%Y") < datetime.datetime.strptime(query_date, "%Y-%m-%d"):
									alert = "!-"
								elif datetime.datetime.strptime(vaccine_reminders_list[vaccine], "%m/%d/%Y") < datetime.datetime.strptime(query_date, "%Y-%m-%d") + relativedelta(months=+6):
									alert = "+-"
								else:
									alert = "  "
							except ValueError:
								alert = "?-"
							vaccine_reminder_document.write(
								"\t{}: {}\n".format(alert + vaccine, vaccine_reminders_list[vaccine]))
						vaccine_reminder_document.write("\n")
			vaccine_reminder_document.close()

	def download_all_pdfs(self):
		count = 0
		for appointment in self.appointment_list:
			count += 1
			self.missing_signatures.extend(self.clinic_connection.download_pdf(appointment['id']))
		return count

	def parse_pdf(self):
		count = 0
		for appointment in self.appointment_list:
			# noinspection PyUnresolvedReferences
			doc = fitz.open(os.path.join(tempfile.gettempdir(), 'pdfs/' + str(appointment['id']) + '.pdf'))
			search_terms = []
			page = doc.load_page(0)
			rect = page.rect  # the page rectangle
			if str(appointment['species']).lower() == 'dog':
				for item in appointment['services']:
					if 'Rabies' in item:
						search_terms.append('Rabies: $')
					elif 'DAPP' in item:
						search_terms.append('Distemper/Parvo: $')
					elif 'Bordetella' in item:
						search_terms.append('Bordetella: $')
					elif 'Influenza' in item:
						search_terms.append('Flu: $')
					elif 'Microchip' in item:
						search_terms.append('Microchip: $')
					elif 'Dewormer' in item:
						search_terms.append('De-Worm: $')
				clip = fitz.Rect(rect.x0, rect.y1 / 2, rect.x1 / 3, rect.y1)
			# page.draw_rect(clip, color=(0, 0, 0), fill=(0, 0, 0), overlay=True)
			elif str(appointment['species']).lower() == 'cat':
				for item in appointment['services']:
					if 'Rabies' in item:
						search_terms.append('Rabies: $')
					elif 'FVRCP' in item:
						search_terms.append('FVRCP: $')
					elif 'Leukemia' in item:
						search_terms.append('Feline Leukemia: $')
					elif 'Microchip' in item:
						search_terms.append('Microchip: $')
					elif 'Dewormer' in item:
						search_terms.append('De-Worm: $')
				mp = (rect.tl + rect.br) / 2  # its middle point, becomes top-left of clip
				clip = fitz.Rect(mp, rect.br)  # the area we want
			# page.draw_rect(clip, color=None, fill=None, overlay=False)
			else:
				raise ValueError('Unexpected species: {}'.format(appointment['species']))
			for term in search_terms:
				i_rects = page.search_for(term, clip=clip, quad=False)
				for i in i_rects:
					if i in clip:
						i.x0 -= 2
						i.y0 -= 1
						i.x0 += 1
						i.x1 += 13
						page.draw_rect(i, color=(0, 0, 0), fill=None, overlay=False)  # draw i
			time_location = fitz.Rect(290, 100, 355, 121)
			page.draw_rect(time_location, color=(1, 1, 1), fill=(1, 1, 1))
			page.insert_textbox(time_location, datetime.datetime.strptime(appointment['startTime'], "%H:%M:%S").strftime(string_time_format), fontsize=12)
			initials_location = fitz.Rect(190, 275, 290, 290)
			page.insert_textbox(initials_location, "Initials:_________", fontsize=12, align=0)
			if appointment['animalCaution']:
				star_location = fitz.Rect(560, 20, 600, 60)
				star_image = b'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'
				page.insert_image(star_location, stream=base64.b64decode(star_image))
			if appointment['id'] in self.missing_signatures:
				yellow_star_image = b'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'
				yellow_star_location = fitz.Rect(148, 400, 178, 430)
				page.insert_image(yellow_star_location, stream=base64.b64decode(yellow_star_image))
			highlight_sections = [initials_location]
			if appointment['medical_attributes']['spayed_neutered']:
				highlight_sections.append((302, 225, 425, 240))
			if appointment['medical_attributes']['health_issues']:
				highlight_sections.append((302, 237, 440, 254))
			if appointment['medical_attributes']['meds_pregnant']:
				highlight_sections.append((302, 252, 450, 267))
			if appointment['medical_attributes']['vaccine_reactions']:
				highlight_sections.append((302, 265, 455, 280))
			if not appointment['clientEmail']:
				highlight_sections.append((40, 208, 211, 222))
			if appointment['clientEmail']:
				regex = r'^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$'
				if not re.fullmatch(regex, appointment['clientEmail'].strip(), re.IGNORECASE):
					highlight_sections.append((40, 208, 211, 222))

			if not appointment['clientCell'] and not appointment['clientHome']:
				highlight_sections.append((40, 235, 211, 249))
			for i in highlight_sections:
				page.add_highlight_annot(fitz.Rect(i))
			count += 1
			string_count = str(count)
			while len(string_count) < 4:
				string_count = str(0) + string_count
			doc.save(os.path.join(tempfile.gettempdir(), 'completed/' + string_count + '.pdf'), garbage=1, deflate=True, clean=True)

	def merge_pdfs(self):
		destination_path = os.path.join(Path.home(), "Downloads", "Vaccination Releases " + self.date + ".pdf")
		directory_list = glob.glob(os.path.join(tempfile.gettempdir(), 'completed/', '*.pdf'))
		directory_list.sort(reverse=False)
		# noinspection PyUnresolvedReferences
		result = fitz.open()
		for pdf in directory_list:
			# noinspection PyUnresolvedReferences
			with fitz.open(pdf) as merged_file:
				result.insert_pdf(merged_file, to_page=0)
		result.save(destination_path, garbage=1, deflate=True, clean=True)

	@staticmethod
	def cleanup():
		directories = [os.path.join(tempfile.gettempdir(), 'completed/'), os.path.join(tempfile.gettempdir(), 'pdfs/')]
		for directory in directories:
			filelist = glob.glob(os.path.join(directory, "*.pdf"))
			for f in filelist:
				os.remove(f)


if __name__ == "__main__":
	username = str(input("ClinicHQ User Name: ")).strip()
	if not sys.stdin.isatty():
		p = str(input("ClinicHQ Password *WILL SHOW AS TYPED*: ")).strip()
	else:
		p = getpass.getpass(prompt="ClinicHQ Password: ")
	print("Opening connection!")
	test = Details(username, p)
	print("Login Successful.")
	query_date = ""
	while query_date == "":
		try:
			query_date = str(input("Enter a date (mm/dd/yyyy): ")).strip()
			query_date = datetime.datetime.strptime(query_date, "%m/%d/%Y")
			query_date = query_date.strftime("%Y-%m-%d")
		except ValueError:
			query_date = ""
			print('Invalid date, try again!')
	program_start = time.time()
	print('Gathering appointments')
	appointment_list = test.get_appointment_list(query_date)
	print("Done, pre-cleaning & setting up temporary directories")
	os.makedirs(os.path.join(tempfile.gettempdir(), 'completed/'), exist_ok=True)
	os.makedirs(os.path.join(tempfile.gettempdir(), 'pdfs/'), exist_ok=True)
	test.cleanup()
	print("Done, retrieving the PDF's")
	test.download_all_pdfs()
	print("All pdf's downloaded, parsing and marking up..")
	test.parse_pdf()
	print("All pdf's marked up, merging into one and placing in Downloads folder.")
	test.merge_pdfs()
	print('PDF\'s Generated, Generating Reminder Summary List')
	test.generate_reminder_summary()
	print("Done, cleaning up.")
	test.cleanup()
	print("Cleanup done, exiting.")
	print("--- Completed in %s seconds ---" % (time.time() - program_start))
	input("Press return to exit.")
